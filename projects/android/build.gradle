// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
  repositories {
    mavenLocal()
    jcenter()
  }
  dependencies {
    // https://developer.android.com/studio/releases/gradle-plugin.html#revisions
    classpath 'com.android.tools.build:gradle:3.0.1'
    classpath 'com.google.gms:google-services:3.0.0'
  }
}

allprojects {
  repositories {
    mavenLocal()
    jcenter()
  }
}

apply plugin: 'com.android.application'

// Pre-experimental Gradle plug-in NDK boilerplate below.
// Right now the Firebase plug-in does not work with the experimental
// Gradle plug-in so we're using ndk-build for the moment.
project.ext {
  // Check the NDK location using the same configuration options as the experimental Gradle plug-in.
  ndk_dir = project.android.ndkDirectory
  if (ndk_dir == null || !ndk_dir.exists()) {
    ndk_dir = System.getenv('ANDROID_NDK_HOME')
    if (ndk_dir == null || ndk_dir.isEmpty()) {
      throw new StopActionException(
        'Android NDK directory should be specified using the ndk.dir ' +
        'property or ANDROID_NDK_HOME environment variable.')
    }
  }
}

android {
    compileSdkVersion 27

    // https://developer.android.com/studio/releases/build-tools.html
    buildToolsVersion "27.0.3"

    sourceSets {
      main {
        jniLibs.srcDirs = ['libs']
        manifest.srcFile 'AndroidManifest.xml'
        java.srcDirs = ['src']
        res.srcDirs = ['res']
        assets.srcDirs = ['assets']
      }
    }

    defaultConfig {
        applicationId 'com.bombergames.SoRR'
        minSdkVersion 15
        targetSdkVersion 27
    }

    signingConfigs {
      release {
         storeFile file("/home/me/my_keys/my_key.keystore")
         storePassword "my_password"
         keyAlias "my_alias"
         keyPassword "my_password"
      }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFile 'Unrecognized value'
            signingConfig signingConfigs.release
            zipAlignEnabled true
        }
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            jniDebuggable true
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    // https://developers.google.com/android/guides/releases
    // Add some package from Google repository, eg:
    // compile 'com.google.android.gms:play-services-ads:9.6.1'
}

// apply plugin: 'com.google.gms.google-services'

task ndkBuildCompile(type:Exec) {
    description 'Use ndk-build to compile the C++ application.'
    String osName = System.getProperty("os.name").toLowerCase();
    if (osName.contains("windows")) {
        commandLine("${project.ext.ndk_dir}${File.separator}ndk-build.cmd")
    } else {
        commandLine("${project.ext.ndk_dir}${File.separator}ndk-build")
    }
}

task ndkBuildClean(type:Exec) {
    description 'Use ndk-build to clean the C++ application.'
    String osName = System.getProperty("os.name").toLowerCase();
    if (osName.contains("windows")) {
        commandLine("${project.ext.ndk_dir}${File.separator}ndk-build.cmd", "clean")
    } else {
        commandLine("${project.ext.ndk_dir}${File.separator}ndk-build", "clean")
    }
}

task appStart(type: Exec, dependsOn: 'installRelease') {
  description 'Run APK on the device'
  commandLine('adb', 'shell', 'am', 'start', '-n', sprintf("%s/.MainActivity", android.defaultConfig.applicationId))
}

// Once the Android Gradle plug-in has generated tasks, add dependencies for the ndk-build targets.
project.afterEvaluate {
  preBuild.dependsOn(ndkBuildCompile)
  clean.dependsOn(ndkBuildClean)
}


// http://services.gradle.org/distributions/
// regenerate the wrapper with :
// ./gradlew wrapper
// or download the bin, and do: ~/Downloads/gradle/gradle-2.14.1/bin/gradle wrapper
task wrapper(type: Wrapper) {
       gradleVersion = '2.14.1'
}

